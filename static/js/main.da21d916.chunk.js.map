{"version":3,"sources":["logo.svg","modals/CreateTask.js","modals/EditTask.js","component/Card.js","component/TODOlist.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskPop","modal","toggle","save","useState","taskName","seTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","rows","cols","ModalFooter","Button","color","onClick","taskObj","EditTaskPopup","updateTask","setTaskName","useEffect","Name","Description","preventDefault","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","EditTask","obj","TODOlist","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","CreateTask","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da21d916.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTaskPop = ({modal,toggle,save}) => {\r\n    const [taskName,seTaskName]=useState('');\r\n    const [description,setDescription]=useState('');\r\n    const handleChange=(e)=>{\r\n        \r\n        const {name,value}=e.target;\r\n        if(name===\"taskName\"){\r\n            seTaskName(value);\r\n        }else{\r\n            setDescription(value);\r\n        }\r\n\r\n    }\r\n    const handleSave=()=>{\r\n        let taskObj={};\r\n        taskObj[\"Name\"]=taskName;\r\n        taskObj[\"Description\"]=description;\r\n        save(taskObj);\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle} >\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n               <form>\r\n                   <div className=\"form-group\">\r\n                       <label>Task Name:</label>\r\n                       <input type=\"text\" className=\"form-control\" value={taskName} onChange={handleChange} name=\"taskName\"/>\r\n                   </div>\r\n                   <div className=\"form-group\">\r\n                   <label>Description:</label>\r\n                       <textarea rows=\"5\" cols=\"\" className=\"form-control\" value={description} onChange={handleChange} name=\"description\"/>\r\n                   </div>\r\n               </form>\r\n        </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n                <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPop;","import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.Name)\r\n        setDescription(taskObj.Description)\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Description'] = description\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, {useState} from 'react';\r\nimport EditTask from '../modals/EditTask'\r\n\r\nconst Card = ({taskObj, index, deleteTask, updateListArray}) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const colors = [\r\n        {\r\n            primaryColor : \"#5D93E1\",\r\n            secondaryColor : \"#ECF3FC\"\r\n        },\r\n        {\r\n            primaryColor : \"#F9D288\",\r\n            secondaryColor : \"#FEFAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#5DC250\",\r\n            secondaryColor : \"#F2FAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#F48687\",\r\n            secondaryColor : \"#FDF1F1\"\r\n        },\r\n        {\r\n            primaryColor : \"#B964F7\",\r\n            secondaryColor : \"#F3F0FD\"\r\n        }\r\n    ]\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const updateTask = (obj) => {\r\n        updateListArray(obj, index)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n    return (\r\n        <div class = \"card-wrapper mr-5\">\r\n            <div class = \"card-top\" style={{\"background-color\": colors[index%5].primaryColor}}></div>\r\n            <div class = \"task-holder\">\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"10px\"}}>{taskObj.Name}</span>\r\n                <p className = \"mt-3\">{taskObj.Description}</p>\r\n\r\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\r\n                    <i class = \"far fa-edit mr-3\" style={{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                    <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n                </div>\r\n        </div>\r\n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React,{useEffect, useState} from 'react';\r\nimport CreateTask from '../modals/CreateTask';\r\nimport Card from './Card'\r\n\r\n\r\nconst TODOlist = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList,setTaskList]=useState([]);\r\n    useEffect(()=>{\r\n        let arr=localStorage.getItem(\"taskList\")\r\n       \r\n        if(arr){\r\n            let obj=JSON.parse(arr);\r\n            \r\n            setTaskList(obj);\r\n        }\r\n    },[]);\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n    const toggle=()=>{\r\n        setModal(!modal);\r\n    }\r\n    const saveTask=(taskObj)=>{\r\n        let tempList=taskList;\r\n        tempList.push(taskObj);\r\n        localStorage.setItem(\"taskList\",JSON.stringify(taskList));\r\n        setTaskList(tempList);\r\n        setModal(false);\r\n    }\r\n    return (\r\n       <>\r\n        <div className=\"header text-center\">\r\n             <h1 className=\"pt-2\">TODO LIST</h1>\r\n            <button className=\"btn btn-primary mt-2\" onClick={()=>setModal(true)}>Create Task</button>\r\n        </div>\r\n        <div className=\"task-container\">\r\n            {taskList.map((obj,index)=><Card taskObj={obj} index={index} deleteTask={deleteTask} updateListArray={updateListArray}/>)}\r\n        </div>\r\n        <CreateTask toggle={toggle} modal={modal} save={saveTask}/>\r\n       </>\r\n    );\r\n};\r\n\r\nexport default TODOlist;","import logo from './logo.svg';\nimport './App.css';\n\n\nimport TODOlist from './component/TODOlist';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TODOlist />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}